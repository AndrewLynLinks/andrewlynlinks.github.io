{"version":3,"sources":["logo.svg","components/TimeList.js","components/Week.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimeList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","inputValue","setState","prevState","results","concat","toConsumableArray","inputValue2","alert","evt","target","value","_this2","react_default","a","createElement","name","map","result","key","id","onChange","updateInputValue","updateInputValue2","onClick","React","Component","Week","_ref","weeks","i","items","push","className","components_TimeList","align","App","components_Week","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97f1ecbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\nclass TimeList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  results: [],\r\n                        inputValue: '1 hour',\r\n                        inputValue2: 'Monday'  };\r\n    };\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({\r\n          inputValue: evt.target.value\r\n        });\r\n    }\r\n\r\n    updateInputValue2(evt) {\r\n        this.setState({\r\n          inputValue2: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.state.inputValue!=\"\"){\r\n            this.setState(prevState => ({\r\n                results: [...prevState.results, this.state.inputValue + \", \" + this.state.inputValue2]\r\n            }));\r\n        }else{\r\n            alert(\"Enter number of hours\")\r\n        }\r\n    };\r\n    \r\n    render() {\r\n        var results = this.state.results;\r\n        return ( \r\n            <div >\r\n            <h4>Week {this.props.name}</h4>    \r\n            <ul>\r\n                {results.map(function(result) {\r\n                return <li key={result.id}>{result}</li>;\r\n                })}\r\n            </ul><hr></hr>\r\n            Hours:&nbsp;&nbsp;\r\n            <select value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)}>\r\n            <option>1 hour</option>\r\n            <option>2 hours</option>\r\n            <option>3 hours</option>\r\n            <option>4 hours</option>\r\n            <option>5 hours</option>\r\n            <option>6 hours</option>\r\n            <option>7 hours</option>\r\n            <option>8 hours</option>\r\n            <option>9 hours</option>\r\n            <option>10 hours</option>\r\n            <option>11 hours</option> \r\n            <option>12 hours</option>    \r\n            </select><br></br>\r\n            Select Day:&nbsp;&nbsp;\r\n            <select value={this.state.inputValue2} onChange={evt => this.updateInputValue2(evt)}>\r\n            <option>Monday</option>\r\n            <option>Tuesday</option>\r\n            <option>Wednesday</option>\r\n            <option>Thursday</option>\r\n            <option>Friday</option>\r\n            <option>Saturday</option>\r\n            <option>Sunday</option></select><br></br><br></br>\r\n            <button onClick={this.handleClick}>Add Work Time</button>\r\n          </div>\r\n        );\r\n      }\r\n    /*\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>List of Times, {this.props.name}</h1>\r\n            <h3>Add Time, {this.props.name}</h3>\r\n            <h3>Remove Time, {this.props.name}</h3>;\r\n        </div>\r\n        );\r\n    }\r\n    */\r\n}\r\n\r\nexport default TimeList;","import React from 'react';\r\nimport TimeList from './TimeList';\r\n\r\nclass Week extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { weeks: 1 };\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState(({ weeks }) => ({\r\n          weeks: weeks + 1\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        var weeks = this.state.weeks;\r\n        var i;\r\n\r\n        const items = []\r\n      \r\n        for (i=0;i<weeks;i++) {\r\n          items.push(<tr><td  className=\"App-body\" ><TimeList name={i+1} results={[\"test1\",\"test2\"]}></TimeList><br></br></td></tr>)\r\n        }\r\n\r\n        return (\r\n            <div><table align=\"center\">\r\n               {items}  </table><br></br> \r\n               <button onClick={this.handleClick}>Add another week</button><br></br><br></br>         \r\n          </div>\r\n        );\r\n      }\r\n    /*\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>List of Times, {this.props.name}</h1>\r\n            <h3>Add Time, {this.props.name}</h3>\r\n            <h3>Remove Time, {this.props.name}</h3>;\r\n        </div>\r\n        );\r\n    }\r\n    */\r\n}\r\n\r\nexport default Week;","import React from 'react';\nimport logo from './logo.svg';\nimport TimeList from './components/Week';\nimport './App.css';\nimport Week from './components/Week';\n \nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Time Tracking\n        </p>        \n      </header>\n      <body>\n        <Week></Week>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}